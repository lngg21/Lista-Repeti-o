# -*- coding: utf-8 -*-
"""Untitled1.ipynb

Automatically generated by Colab.

Original file is located at
    https://colab.research.google.com/drive/1Dg6jp-Zbcr0lly0QrSkD9Y9uOHjZ7qlZ
"""

# 1) Desenvolver um algoritmo que efetue a soma de todos os números ímpares que são múltiplos de
# três e que se encontram no conjunto dos números de 1 até 500

soma = 0

for n in range(1, 500):

  if n %2 !=0 and n%3 ==0:
    soma +=n

  print(soma)

# 2) Desenvolver um algoritmo que leia a altura de 15 pessoas. Este programa deverá calcular e
# mostrar :
# a. A menor altura do grupo;
# b. A maior altura do grupo;

alturas = []

for alt in range(15):
  alt = float(input("Digite as alturas "))
  alturas.append(alt)

altX = max(alturas)
altN = min(alturas)

print(altX)
print(altN)

# 3) Desenvolver um algoritmo que leia um número não determinado de valores e calcule e escreva a
# média aritmética dos valores lidos, a quantidade de valores positivos, a quantidade de valores
# negativos e o percentual de valores negativos e positivos.

numeros = []

numNeg = []
numPos = []

while True:

  num = int(input("Digite os seus numeros: "))
  numeros.append(num)

  fim = input("Deseja continuar S/N: ")
  if fim.upper() != "S":
    break

soma = sum(numeros)
qtdGeral = len(numeros)

media = soma / qtdGeral


for n in numeros:
  if n < 0:
    numNeg.append(n)
  else:
    numPos.append(n)
##Quantidades de Positivos
  qtdPos = len(numPos)
##Quantidade de Negativos
  qtdNeg = len(numNeg)



percNeg = (qtdNeg / qtdGeral ) * 100 if qtdGeral > 0 else 0
percPos = (qtdPos / qtdGeral ) * 100 if qtdGeral > 0 else 0


print(f"\nMédia aritmética dos valores: {media:.2f}")
print(f"Quantidade de valores positivos: {qtdPos}")
print(f"Quantidade de valores negativos: {qtdNeg}")
print(f"Percentual de valores positivos: {percPos:.2f}%")
print(f"Percentual de valores negativos: {percNeg:.2f}%")

# 4) Escrever um algoritmo que leia uma quantidade desconhecida de números e conte quantos deles
# estão nos seguintes intervalos: [0-25], [26-50], [51-75] e [76-100]. A entrada de dados deve
# terminar quando for lido um número negativo.


vCinco = []
cQuenta = []
cTenta = []
cem = []

while True:

  num = int(input("Digite os seus numeros: "))



  if num < 0:
    break

  if num >= 0 and num <= 25:
        vCinco.append(num)
  elif num >= 26 and num <= 50:
        cQuenta.append(num)
  elif num >= 51 and num <= 75:
        cTenta.append(num)
  elif num >= 76 and num <= 100:
        cem.append(num)


qtdUm = len(vCinco)
qtdDois= len(cQuenta)
qtdTres = len(cTenta)
qtdQuatro = len(cem)

print(f"Quantidade de valores entre o intervalo 0 - 25: {qtdUm}")
print(f"Quantidade de valores entre o intervalo 26 - 50: {qtdDois}")
print(f"Quantidade de valores entre o intervalo 51 - 75: {qtdTres}")
print(f"Quantidade de valores entre o intervalo 76 - 100: {qtdQuatro}")

# 5) Faça um algoritmo estruturado que leia uma quantidade não determinada de números positivos.
# Calcule a quantidade de números pares e ímpares, a média de valores pares e a média geral dos
# números lidos. O número que encerrará a leitura será zero.
pares = []
impares = []
soma_total = 0
qtd_numeros = 0

while True:
    num = int(input("Digite um número positivo : "))

    if num == 0:
        break
    elif num < 0:
        print("Digite um número positivo.")
        continue

    qtd_numeros += 1
    soma_total += num

    if num % 2 == 0:
        pares.append(num)
    else:
        impares.append(num)

# Cálculo das médias
if len(pares) > 0:
    media_pares = sum(pares) / len(pares)
else:
    media_pares = 0
if qtd_numeros > 0:
    media_geral = soma_total / qtd_numeros
else:
    media_geral = 0

print(f"\nQuantidade de números pares: {len(pares)}")
print(f"Quantidade de números ímpares: {len(impares)}")
print(f"Média dos valores pares: {media_pares:.2f}")
print(f"Média geral dos números: {media_geral:.2f}")

# 6) Escrever um algoritmo que gera e escreve os números ímpares entre 100 e 200

for n in range(101, 200, 2) :
    print(n)

# 7) Escrever um algoritmo que leia um valor para uma variável N de 1 a 10 e calcule a tabuada de
# N. Mostre a tabuada na forma: 0 x N = 0, 1 x N = 1N, 2 x N = 2N, ..., 10 x N = 10N.
N = int(input("Digite um numero entre 1 e 10: "))
for i in range(11):
  if 1 <= N <= 10:
    resultado = N * i
  print(f"{N} x {i} = {resultado}")
else:
  print("Digite um numero entre um e 10")

# 8) Escreva um algoritmo que leia um valor inicial A e uma razão R e imprima uma seqüência em
# P.A. contendo 10 valores.

a = int(input("Digite um valor inteiro inicial: "))
r = int(input("Digite um valor inteiro para a razão: "))



for n in range(10):
  pa = a + (n * r)
  print(pa)

# 9) Escreva um algoritmo que leia um valor inicial A e uma razão R e imprima uma seqüência em
# P.G. contendo 10 valores.

# 8) Escreva um algoritmo que leia um valor inicial A e uma razão R e imprima uma seqüência em
# P.A. contendo 10 valores.

a = int(input("Digite um valor inteiro inicial: "))
r = int(input("Digite um valor inteiro para a razão: "))



for n in range(10):
  pg = a * r**n
  print(pg)

# 10) Escreva um algoritmo que leia um valor inicial A e imprima a seqüência de valores do cálculo de
# A! e o seu resultado. Ex: 5! = 5 X 4 X 3 X 2 X 1 = 120

a = int(input("Digite um valor inteiro: "))

resultado = 1
sequencia = []

for i in range(a, 0, -1) :
        resultado *= i
        sequencia.append(i)
        print(a, "! =", resultado)